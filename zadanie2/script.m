% Очистка рабочей области и консоли
clear all; clc;

% =========================================================
% 1. Задаем параметры для решения уравнения
% =========================================================

% Исходная функция f(x) = 0
f = @(x) sqrt(x + 1) - 1 ./ x;

% Производная исходной функции f'(x)
% Используется для расчета параметров m и M
f_prime = @(x) 1./(2*sqrt(x+1)) + 1./(x.^2);

% Требуемая точность вычислений
epsilon = 1e-4;

% Интервал локализации корня [a, b]
a = 0.5;
b = 3.0;

% Начальное приближение (точка, с которой начинаем поиск)
x0 = 0.6;

% =========================================================
% 2. Вычисляем параметры МОДИФИЦИРОВАННОГО метода
% =========================================================

% Находим максимальное (M) и минимальное (m) значение производной
% на интервале [a, b]. f_prime(x) - убывающая функция, поэтому:
% M = f_prime(a) - максимальное значение на левом конце
% m = f_prime(b) - минимальное значение на правом конце
M = f_prime(a);
m = f_prime(b);

% Вычисляем оптимальный параметр alpha, обеспечивающий сходимость
alpha = 2 / (M + m);

% Вычисляем коэффициент сходимости q
q = (M - m) / (M + m);

% Вычисляем вспомогательную величину epsilon0 для критерия остановки
% Условие остановки: |x_new - x_old| <= epsilon0
epsilon0 = ((1 - q) / q) * epsilon;

% =========================================================
% 3. Форматируем вывод результатов и параметров
% =========================================================

fprintf('Модифицированный метод простой итерации:\n');
fprintf('Интервал локализации: [%.2f, %.2f]\n', a, b);
fprintf('Начальное приближение x0 = %.6f\n', x0);
fprintf('Требуемая точность ε = %.6f\n', epsilon);
fprintf('Максимум производной M = f''(%.2f) = %.6f\n', a, M);
fprintf('Минимум производной m = f''(%.2f) = %.6f\n', b, m);
fprintf('Параметр α = 2/(M+m) = %.6f\n', alpha);
fprintf('Коэффициент сходимости q = (M-m)/(M+m) = %.6f\n', q);
fprintf('Вычисленная точность ε0 = ((1-q)/q)*ε = %.6f\n', epsilon0);

% Заголовки таблицы результатов
fprintf('\n№ итерации |    Корень    |   Разность   |  Точность ε0\n');
fprintf('-----------|--------------|--------------|-------------\n');

% =========================================================
% 4. Основной цикл вычислений МОДИФИЦИРОВАННОГО метода
% =========================================================

% Начинаем с начального приближения
x_prev = x0;

% Делаем до 100 итераций (максимум)
for k = 1:100
    % ВЫЧИСЛЯЕМ НОВОЕ ПРИБЛИЖЕНИЕ по формуле модифицированного метода:
    % x_{k+1} = x_k - α * f(x_k)
    x_next = x_prev - alpha * f(x_prev);

    % Считаем разницу между текущим и предыдущим значением
    diff = abs(x_next - x_prev);

    % Выводим результаты текущей итерации
    fprintf('%10d | %12.6f | %12.6f | %12.6f\n', k, x_next, diff, epsilon0);

    % Проверяем условие остановки: если разность меньше epsilon0
    if diff <= epsilon0
        break; % Если условие выполнено - выходим из цикла
    end

    % Переходим к следующей итерации
    x_prev = x_next;
end

% =========================================================
% 5. Выводим итоговый результат
% =========================================================

fprintf('\nНайден корень уравнения: x ≈ %.6f\n', x_next);
fprintf('Количество итераций: %d\n', k);
fprintf('Значение функции в корне: f(x) = %.6e\n', f(x_next));
fprintf('Проверка: |x_(%d) - x_(%d)| = %.6e <= ε0 = %.6e\n', k, k-1, diff, epsilon0);

